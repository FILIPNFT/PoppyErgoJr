# Import neophodnih biblioteka
import time
import numpy as np
import matplotlib.pyplot as plt
from pypot.creatures import PoppyErgoJr
import cv2  # OpenCV za obradu slike

# Inicijalizacija robota sa "base posture"
poppy = PoppyErgoJr()

poppy.m1.moving_speed = 40
poppy.m2.moving_speed = 40
poppy.m3.moving_speed = 40
poppy.m4.moving_speed = 40
poppy.m5.moving_speed = 40
poppy.m6.moving_speed = 40

# Funkcija za sortiranje kockica po boji i poziciji
def sortiraj_kockice():
    while True:
        # Postavljanje robota u početnu poziciju (base posture)
        poppy.base_posture.start()
        poppy.base_posture.stop()
        time.sleep(3)
        
        # Učitaj sliku sa kamere
        img = poppy.camera.frame
        
        # Prikaži sliku za vizualizaciju (može se ukloniti u finalnoj verziji)
        plt.imshow(img)
        plt.show()
        
        # Konverzija slike iz RGB u HSV (za lakše prepoznavanje boje)
        hsv_img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)

        # Definisanje opsega za detekciju boja
        # Opseg za crvenu boju
        lower_red = np.array([0, 120, 70])
        upper_red = np.array([10, 255, 255])
        mask_red = cv2.inRange(hsv_img, lower_red, upper_red)
        
        # Opseg za plavu boju
        lower_blue = np.array([94, 80, 2])
        upper_blue = np.array([126, 255, 255])
        mask_blue = cv2.inRange(hsv_img, lower_blue, upper_blue)
        
        # Konture za crvenu boju
        contours_red, _ = cv2.findContours(mask_red, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        # Konture za plavu boju
        contours_blue, _ = cv2.findContours(mask_blue, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        
        # Ako detektujemo crvenu kockicu
        if contours_red:
            largest_contour = max(contours_red, key=cv2.contourArea)  # Najveća kontura
            cx, cy = nadji_centroid(largest_contour)  # Pronalaženje centroida
            print(f"Crvena kockica detektovana na poziciji: ({cx}, {cy})")
            spusti_ruku(cx, cy)  # Spusti hvataljku na tačno mesto
            time.sleep(4)
            pomeri_hvataljku_na_poziciju("levo")  # Postavi čep levo i zatim pusti čep

        # Ako detektujemo plavu kockicu
        elif contours_blue:
            largest_contour = max(contours_blue, key=cv2.contourArea)  # Najveća kontura
            cx, cy = nadji_centroid(largest_contour)  # Pronalaženje centroida
            print(f"Plava kockica detektovana na poziciji: ({cx}, {cy})")
            spusti_ruku(cx, cy)  # Spusti hvataljku na tačno mesto
            time.sleep(4)
            pomeri_hvataljku_na_poziciju("desno")  # Postavi čep desno i zatim pusti čep

        # Provera da li ima novih čepova nakon što je akcija završena
        print("Čekanje da se pojavi novi čep...")
        time.sleep(3)  # Sačekaj 3 sekunde

        # Ponovno učitavanje slike da proverimo da li se pojavio novi čep
        img_nova = poppy.camera.frame
        hsv_img_nova = cv2.cvtColor(img_nova, cv2.COLOR_RGB2HSV)
        
        mask_red_nova = cv2.inRange(hsv_img_nova, lower_red, upper_red)
        mask_blue_nova = cv2.inRange(hsv_img_nova, lower_blue, upper_blue)

        # Proveri da li ima novog crvenog ili plavog čepa
        if np.sum(mask_red_nova) == 0 and np.sum(mask_blue_nova) == 0:
            print("Nema novog čepa, završavam akciju.")
            break  # Prekida ciklus ako nema novih čepova
        else:
            print("Novi čep je detektovan, ponavljam akciju.")

# Funkcija za pronalaženje centroida objekta
def nadji_centroid(contour):
    M = cv2.moments(contour)
    if M["m00"] != 0:
        cx = int(M["m10"] / M["m00"])
        cy = int(M["m01"] / M["m00"])
    else:
        cx, cy = 0, 0
    return cx, cy

# Funkcija za spuštanje hvataljke na preciznu poziciju i hvatanje kockice sa proverom
def spusti_ruku(cx, cy):
    # Prilagođavanje motora na osnovu pozicije centroida (cx, cy)
    poppy.m1.goal_position = mapiraj_na_motor(cx)  # Pomeranje po x-osi
    time.sleep(1)  # Pauza za dolazak u horizontalnu poziciju

    # Spuštanje ruke pomoću M3
    print("Spuštanje ruke...")
    poppy.m3.goal_position = -55  # Spuštanje ruke
    time.sleep(5)  # Pauza da ruka dođe do pozicije
    
    # Zatvaranje hvataljke pomoću M6
    print("Zatvaranje hvataljke...")
    poppy.m6.goal_position = -15  # Zatvaranje hvataljke
    time.sleep(5)

    # Verifikacija da li je čep uhvaćen
    if not proveri_hvatanje():
        print("Hvataljka nije uhvatila čep, spuštanje ruke još malo...")
        poppy.m3.goal_position = -45  # Spuštanje ruke još malo
        time.sleep(5)
        poppy.m6.goal_position = -15  # Ponovo zatvaranje hvataljke
        time.sleep(5)

    # Podizanje ruke
    print("Podizanje ruke...")
    poppy.m3.goal_position = 0  # Podizanje ruke
    time.sleep(7)

# Funkcija za proveru hvatanja na osnovu opterećenja na motoru M6
def proveri_hvatanje():
    load = poppy.m6.present_load
    print(f"Trenutno opterećenje hvataljke: {load}")
    return load > 10  # Ako je opterećenje iznad 10%, pretpostavlja se da je čep uhvaćen

# Mapiranje x-osi slike na motor M1
def mapiraj_na_motor(cx):
    # Pretpostavka: Slika je 640 piksela široka, a motor M1 ima opseg od -30 do 30 stepeni
    return (cx / 640.0) * 60 - 30  # Mapiraj x-poziciju slike na motorni opseg

# Funkcija za pomeranje hvataljke na poziciju levo ili desno i puštanje čepa nakon rotacije
def pomeri_hvataljku_na_poziciju(smer):
    if smer == "levo":
        # Postavljanje na poziciju levo za crvene kockice
        print("Rotacija hvataljke na levo...")
        poppy.base_posture.stop()

        time.sleep(3)
        
        poppy.m4.led = "yellow"
        poppy.m4.goal_position = 90  # Rotacija ka levoj poziciji
        time.sleep(5)
        print("Opuštanje hvataljke (puštanje čepa)...")
        poppy.m6.goal_position = 45  # Opuštanje hvataljke (puštanje čepa)

    elif smer == "desno":
        # Postavljanje na poziciju desno za plave kockice
        print("Rotacija hvataljke na desno...")
        poppy.base_posture.stop()

        time.sleep(3)
        
        poppy.m4.led = "yellow"
        poppy.m4.goal_position = -90  # Rotacija ka desnoj poziciji
        time.sleep(5)
        print("Opuštanje hvataljke (puštanje čepa)...")
        poppy.m6.goal_position = 45  # Opuštanje hvataljke (puštanje čepa)

# Pozivanje funkcije za sortiranje kockica
sortiraj_kockice()
